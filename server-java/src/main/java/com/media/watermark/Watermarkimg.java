package com.media.watermark;

import java.util.ArrayList;
/*The watermark image is generated by using watermark sequence and random image sequence
 @Time 2020-04-20 14:49:01
 */
public class Watermarkimg {
    private Complex[][] markimg;                                                                                        //Watermark image matrix
    private double[] radiuses;                                                                                          //The radius sequence of the ring
    private double[][] Ug;                                                                                              //Positioning image matrix

    /**
     * @param markimg1 Watermark image matrix
     * @param radiu The radius sequence of the ring
     * @param Ug1 Positioning image matrix
     *@return  this
     */
    public Watermarkimg(Complex[][] markimg1,double[] radiu,double[][] Ug1){
        this.markimg=markimg1;
        this.radiuses=radiu;
        this.Ug=Ug1;
    }

    public double[] getRadiuses() {
        return radiuses;
    }

    public Complex[][] getMarkimg() {
        return markimg;
    }

    public double[][] getUg() {
        return Ug;
    }

    /**The watermark image is generated by using watermark sequence and random image sequence
     * @param row The number of rows in the watermark image matrix
     * @param cole The number of coles in the watermark image matrix
     * @param seeds Random number seed sequence
     * @param radiusNum Number of rings
     * @param markNum Watermark sequence
     * @param pattern  zone bit
     * @return new Watermarkimg
     */
    public static Watermarkimg waterMarkImg(int row, int cole, int[] seeds, int radiusNum, int[] markNum,int pattern){
        double[][] Ug=new double[row][cole];
        ArrayList<double[][]> Ig=new ArrayList<>();                                                                     //Random image matrix sequence
        ArrayList<Complex[][]> DFTg=new ArrayList<>();                                                                  //The random image is transformed into a matrix sequence generated in the frequency domain
        ArrayList<Complex[][]> Rc;                                                                                      //Circle the sequence
        ArrayList<ArrayList<Complex[][]> > Rg;                                                                          //Circle the sequence
        int seednum = seeds.length;

        //Generate a sequence of random matrices
        Sequences randSequence = Sequences.sequences(seeds, row, cole, seednum);

        for (int i = 0; i < seednum - 1; ++i) {
            Ig.add(randSequence.getRandSequences().get(i));                                                             //Random image matrix sequence
        }
        Ug=randSequence.getRandSequences().get(seednum-1);                                                              //Positioning image matrix
        //Transform the generated random image sequence to the frequency domain
        for(int i=0;i<seednum-1;i++){
            double[][] Yc=Ig.get(i);
            DFTg.add(FourierUtils.shift_to_center(FourierUtils.getFft(Yc)));
        }

        Radius radius=Radius.radius(radiusNum,row,cole);
        double[] radiuses=radius.getR();                                                                                //Ring radius sequence
        for (int i=radiuses.length-1;i>0;--i){
            if(radiuses[i]-radiuses[i-1]<2){
                radiuses[i-1]=radiuses[i]-2;
            }
        }
        //Dividing circle
        Rc= DivideCircle.divideCircle(radiuses,DFTg.get(0)).getRc();                                                       //Circle the sequence
        Rg= DivideCircles.divideCircles(Rc,DFTg,radiusNum,seednum-1).getRg();                                        //Circle the sequence
        if (pattern==1){
            Makeimg a=Makeimg.makeImg(Rg,markNum);
            return new Watermarkimg(a.getMarkeImg(),radiuses,Ug);
        }else{
            Makeimg a=Makeimg.makeImgsecond(Rg,markNum);
            return new Watermarkimg(a.getMarkeImg(),radiuses,Ug);
        }
    }

}
