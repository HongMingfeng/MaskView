package com.media.watermark;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * The watermark information in the image is extracted
 * according to the initial input path and initial parameters
 *
 * @Time 2020-04-20 14:49:01
 */

public class Watermarkextract1 {
    //private String robCodeFileAddress;
    private String file;                                                                                                //Image path
    private static String biort = "legall";                                                                             //filter
    private static String qshift = "qshift_c";                                                                          //filter
    private static int row = 128, cole = 128;                                                                           //The size of the watermark block
    private int num = 10;                                                                                               //Number of random pattern diagrams
    private int stepnum = 90;                                                                                           //Single rotation Angle
    private int nlevels = 3;                                                                                            //The number of layers of the wavelet transform
    private static int[] seeds = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};                                                   //Random number seed sequence
    public static ArrayList<String> robustWaterMarkList = new ArrayList<>();
    public static ArrayList<String> zeroWaterMarkList = new ArrayList<>();
    public String robustWaterMark;
    public List<String> zeroWaterMark;

    public String getRobustWaterMark() {
        return robustWaterMark;
    }

    public List<String> getZeroWaterMark() {
        return zeroWaterMark;
    }

    /**
     * The random number sequence is generated by using the random method, and the image matrix is generated by filling the array
     *
     * @param file Image path
     *             //*@param starttime start time
     * @return Generated image matrix sequence
     */


    public Watermarkextract1(String file, String rg0TxtFileAddress) throws IOException {
        Long starttime = (long) 0;
        int radius_num = 23;                                                                                            //Number of rings
        //Read image information
        this.file = file;
        File file0 = new File(this.file);
        BufferedImage BI = ImageIO.read(file0);
        //Generate a sequence of random matrices
        Sequences randSequence = Sequences.sequences(seeds, row, cole, num + 1);
        double[][] Ip1 = randSequence.getRandSequences().get(10).clone();
        double[][] Ip2 = Ip1.clone();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                60L, TimeUnit.SECONDS,
                new SynchronousQueue<Runnable>());
        ArrayList<ArrayList<double[][]>> Rg0 = new ArrayList<>();
        //Reads the data from the specified path
        File files = new File(rg0TxtFileAddress);
        //File files = new File("rg0.txt");
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(files)));
        for (int i = 0; i < num; i++) {
            ArrayList<double[][]> temp = new ArrayList<>();
            for (int j = 0; j < radius_num; j++) {
                if (j == 0) {
                    temp.add(new double[0][]);
                } else {
                    double[][] r = new double[128][128];
                    for (int q = 0; q < 128; q++) {
                        String temps = reader.readLine();
                        String[] re = temps.split(" ");
                        for (int w = 0; w < 128; w++) {
                            r[q][w] = Double.parseDouble(re[w]);
                        }
                    }
                    temp.add(r);
                }
            }
            Rg0.add(temp);
        }
        if (BI.getWidth() >= 256 && BI.getHeight() >= 256) {
            int tip = 0;
            if (BI.getHeight() >= (256 + 128) && BI.getHeight() >= (256 + 128)) {
                tip = 1;
            }
            //Extract watermark information
            //01 upper left, 23 lower left,45 lower right, 67 upper right
            for (int i = 0; i < 4; i++) {
                if (i == 0) {
                    Extract e0 = new Extract(BI, tip, Ip1, Ip2, radius_num, i, starttime, Rg0);
                    executor.execute(e0);
                } else if (i == 1) {

                    Extract e1 = new Extract(BI, tip, Ip1, Ip2, radius_num, i, starttime, Rg0);
                    executor.execute(e1);
                } else if (i == 2) {
                    Extract e2 = new Extract(BI, tip, Ip1, Ip2, radius_num, i, starttime, Rg0);
                    executor.execute(e2);
                } else {
                    Extract e3 = new Extract(BI, tip, Ip1, Ip2, radius_num, i, starttime, Rg0);
                    executor.execute(e3);
                }
            }
        }
        BI.flush();
        int activeCount = executor.getActiveCount();
        while (activeCount != 0) {
            activeCount = executor.getActiveCount();
        }
        //executor.shutdown();
        IsEqual isEqual = new IsEqual();
        if (Watermarkextract1.robustWaterMarkList.size() < 4) {
            System.out.println("该图片不含水印信息");
        }
        this.robustWaterMark = isEqual.isequal(Watermarkextract1.robustWaterMarkList);
        this.zeroWaterMark = Watermarkextract1.zeroWaterMarkList;
        for (int i = 0; i < Watermarkextract1.zeroWaterMarkList.size(); ++i) {
            System.out.println(Watermarkextract1.zeroWaterMarkList.get(i));
        }
    }

    public static void main(String[] args) throws IOException {

        Watermarkextract1 a = new Watermarkextract1(args[2], args[3]);
        //System.out.println(a.robustWaterMark);
        File testFile = new File(args[1]);
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(testFile));
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        File f = new File(args[1]);
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(f, true));
            out.write(a.robustWaterMark);
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.exit(0);
    }
}